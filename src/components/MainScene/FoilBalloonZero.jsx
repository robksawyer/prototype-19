/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import * as React from 'react';
import { useGLTF, useHelper } from '@react-three/drei';
import { useLoader, useFrame, useThree } from '@react-three/fiber';
import { TextureLoader } from 'three/src/loaders/TextureLoader';

const dummy = new THREE.Vector3();
const lookAtPos = new THREE.Vector3();

export default function FoilBalloonZero(props) {
  const [colorMap, displacementMap, normalMap, roughnessMap] = useLoader(
    TextureLoader,
    [
      '/3d/models/foil_balloon_zero/textures/plastic_Mat_baseColor.png',
      '/3d/models/foil_balloon_zero/textures/plastic_Mat_roughness.png',
      '/3d/models/foil_balloon_zero/textures/plastic_Mat_normal.png',
      '/3d/models/foil_balloon_zero/textures/plastic_Mat_metallic.png',
    ],
  );

  const { scene } = useThree();
  const group = React.useRef();
  const spotLight = React.useRef();
  const mesh = React.useRef();
  const { nodes, materials } = useGLTF(
    '/3d/models/foil_balloon_zero/foil_balloon_zero.gltf',
  );
  // const [zoom, setZoom] = React.useState(false);

  React.useEffect(() => {
    spotLight.current.target = mesh.current;
  }, [scene]);

  // React.useEffect(() => {
  //   setTimeout(() => {
  //     setZoom(zoom => !zoom);
  //   }, 2000);
  // }, [zoom]);

  useFrame(({ clock, camera }) => {
    const step = 0.1;

    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      clock.getElapsedTime() * 1,
      step,
    );
    // group.current.rotation.x = THREE.MathUtils.lerp(
    //   group.current.rotation.x,
    //   clock.getElapsedTime() * 0.1,
    //   0.01,
    // );

    // camera.fov = THREE.MathUtils.lerp(camera.fov, zoom ? 10 : 42, step);
    // camera.position.lerp(
    //   dummy.set(zoom ? 25 : 10, zoom ? 1 : 5, zoom ? 0 : 10),
    //   step,
    // );

    // lookAtPos.x = Math.sin(clock.getElapsedTime() * 2);

    // camera.lookAt(lookAtPos);
    // camera.updateProjectionMatrix();
  });

  // useHelper(spotLight, THREE.SpotLightHelper, 'teal');

  return (
    <group ref={group} {...props} dispose={null}>
      <spotLight
        castShadow
        position={[-5, 2, 10]}
        ref={spotLight}
        angle={0.5}
        distance={5}
      />
      <mesh
        ref={mesh}
        castShadow
        receiveShadow
        sides={THREE.BackSide}
        geometry={nodes.foil_balloon_zero.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.05, 0.05, 0.05]}
      >
        <meshStandardMaterial
          map={colorMap}
          displacementMap={displacementMap}
          normalMap={normalMap}
          roughnessMap={roughnessMap}
          // aoMap={aoMap}
          metalness={1}
          roughness={0}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload('/3d/models/foil_balloon_zero/foil_balloon_zero.gltf');
